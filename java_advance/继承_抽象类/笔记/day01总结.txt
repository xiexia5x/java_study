1 能够写出类的继承格式
 extends
 
 public class 子类名 extends 父类名{
 
 }

2 能够说出继承的特点
	
	1 提高代码的复用性 , 减少代码的冗余
	2 提高代码的维护性
	3 让类与类产生了关系(继承) , 多态的前提
	
	开发原则 : 高内聚 , 低耦合
		内聚 : 自己完成功能的能力
		耦合 : 类与类之间的关系

3 能够说出子类调用父类的成员特点
  成员访问特点 : 
	成员变量 : 就近原则
	成员方法 : 就近原则
	构造方法 : 
		每个构造方法中都会有一个super() 访问父类的空参数构造
		原因 : 我们子类初始化 有可能会用到父类的数据 , 所以通过super()访问父类的构造 , 给父类的数据初始化

4 能够说出方法重写的概念
	重载 : 同一类中 , 出现了方法名相同的方法
		特点 : 1 方法名相同 2 参数列表不同(要么参数的个数 , 要么对应的数据类型)	
		注意 : 与返回值类型无关
	
	重写 : 子父类中出现了一模一样的方法(方法名 , 参数列表)
	使用 : 当父类的功能满足不来子类的时候 , 子类需要重写 , 增加新的功能 , 还可以延续父类的功能
	
	重写注意事项 : 
		1 方法名和参数列表需要保持一致
		2 private修饰的方法不能被重写
		3 子类方法的权限必须大于等于父类方法的权限(public > protected > 默认的 > private)
		
		4 子类方法的返回值类型可以是父类方法的返回值类型的子类

5 能够说出this可以解决的问题
	局部变量和成员变量同名的问题
	
	this.成员变量
	this.成员方法
	this(...)

6 能够说出super可以解决的问题

	super.成员变量
	super.成员方法
	super(...)

7 能够描述抽象方法的概念
	一个方法要么有方法体 , 要么就是一个抽象方法(abstract修饰)
	
	当一个方法它的方法体不能确定 , 这个方法需要定义成抽象方法

8 能够写出抽象类的格式
	
	public abstract class 类名{
	
	}

9 能够写出抽象方法的格式

	修饰符 abstract 返回值类型 方法名(参数);

10 能够说出父类抽象方法的存在意义

	抽象方法 : 让子类必须实现某个功能
		
    非抽象方法 : 让子类去继承 , 提高代码的复用性
